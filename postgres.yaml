# Big shoutout to my homies at DigitalOcean from which I could base the initial docker setup on
# (https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-install-and-set-up-docker-on-ubuntu-18-04 but we're debian gang instead)

- name: Postgres Deployment Playbook
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
    # Everything below are defaults and generally intended to be overidden in the template
    postgres_container_name: postgres
    postgres_external_port: 5432
  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'gnupg-agent', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools' ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Create Postgres database storage directory
      file:
        path: /etc/postgres-storage/{{ postgres_container_name }}
        state: directory
        mode: '0740'

    - name: Create Postgres container
      docker_container:
        name: "{{ postgres_container_name }}"
        image: "{{ postgres_container_image }}"
        state: started
        restart: yes
        ports:
          - "{{ postgres_external_port }}:5432"
        volumes:
          - /etc/postgres-storage/{{ postgres_container_name }}:/var/lib/postgresql/data
        env:
          POSTGRES_PASSWORD: "{{ postgres_password }}"
